---
description: 
globs: 
alwaysApply: true
---

# Your rule content
本项目是一个基于 LangGraph + LangChain 的智能“海龟汤”推理游戏系统，玩家通过提问逐步接近谜底。

系统支持：
- 多类型智能提示（如方向线索、偏离提醒等）
- 思维链结构维护（memory）
- LLM 判断玩家状态（偏离、绕圈、尝试不足）
- LangGraph 控制流程（Router + Tool + LLM node）

---
📁 项目结构约定
- src/
  - main.py：主程序入口
  - graph.py：LangGraph 构建流程
  - state_schema.py：GameState 结构定义
  - memory/
      - brainchain.py：BrainChainMemory 类
  - tools/
      - hint_generator.py：HintGeneratorTool 实现
      - detectors.py：偏离、绕圈、尝试不足检测模块
      - answer_judge.py：答案判断模块
  - prompts/
      - hint_templates.json：四种 hint_type 的提示词模板

---
📌 编码规则（Cursor 自动生成关键点）
1. 所有 LangGraph 节点必须使用 `.add_node(name, func, type='tool/llm/conditional')` 形式注册。

2. 每个模块必须明确：
   - 输入字段（来自 state/memory）
   - 输出字段（写入 state）
   - prompt 模板路径（如 hint_templates.json）

3. 所有 memory 操作统一使用 brainchain.py 中的方法（如 add_node, update_focus）

4. GameState 中只存放“当前回合上下文字段”（如 current_question / is_looping），不记录历史。

5. 所有提示线索使用 HintGeneratorTool 生成，hint_type 为：['direction', 'deviation', 'default', 'strategy']

6. 提问主流程节点顺序必须为：
   - 尝试不足 → 绕圈检测 → 偏离检测 → 更新脑链 → 回答生成 → 更新历史

7. 所有 prompt 必须使用 JSON 结构化输出，例如：
json
{
  "is_deviated": true,
  "hint_text": "你可能偏离了方向，建议关注现场状况"
}
8. 回答模块（GenerateAnswer）必须只返回：host_reply（是/否/无关）与 reply_type。
---

所有 LangGraph 分支必须从 player_action router 分出：['question', 'answer_request', 'hint_request']


- Prompt 模板：@prompt_templates.pdf
- 节点流程：@LangGraph节点说明.pdf
- 输入输出字段：@输入输出列表.pdf
- 数据结构定义：@数据结构.pdf

请在现有结构基础上，生成模块代码、注册流程图，确保 prompt / 输入输出 / 状态更新 与文档保持一致。
